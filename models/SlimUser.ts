/* tslint:disable */
/* eslint-disable */
/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Organization } from './Organization';
import {
    OrganizationFromJSON,
    OrganizationFromJSONTyped,
    OrganizationToJSON,
} from './Organization';
import type { UserOrganization } from './UserOrganization';
import {
    UserOrganizationFromJSON,
    UserOrganizationFromJSONTyped,
    UserOrganizationToJSON,
} from './UserOrganization';

/**
 * 
 * @export
 * @interface SlimUser
 */
export interface SlimUser {
    /**
     * 
     * @type {string}
     * @memberof SlimUser
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof SlimUser
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof SlimUser
     */
    name?: string;
    /**
     * 
     * @type {Array<Organization>}
     * @memberof SlimUser
     */
    orgs: Array<Organization>;
    /**
     * 
     * @type {Array<UserOrganization>}
     * @memberof SlimUser
     */
    userOrgs: Array<UserOrganization>;
}

/**
 * Check if a given object implements the SlimUser interface.
 */
export function instanceOfSlimUser(value: object): boolean {
    if (!('email' in value)) return false;
    if (!('id' in value)) return false;
    if (!('orgs' in value)) return false;
    if (!('userOrgs' in value)) return false;
    return true;
}

export function SlimUserFromJSON(json: any): SlimUser {
    return SlimUserFromJSONTyped(json, false);
}

export function SlimUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): SlimUser {
    if (json == null) {
        return json;
    }
    return {
        
        'email': json['email'],
        'id': json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'orgs': ((json['orgs'] as Array<any>).map(OrganizationFromJSON)),
        'userOrgs': ((json['user_orgs'] as Array<any>).map(UserOrganizationFromJSON)),
    };
}

export function SlimUserToJSON(value?: SlimUser | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'email': value['email'],
        'id': value['id'],
        'name': value['name'],
        'orgs': ((value['orgs'] as Array<any>).map(OrganizationToJSON)),
        'user_orgs': ((value['userOrgs'] as Array<any>).map(UserOrganizationToJSON)),
    };
}

