/* tslint:disable */
/* eslint-disable */
/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChunkFilter } from './ChunkFilter';
import {
    ChunkFilterFromJSON,
    ChunkFilterFromJSONTyped,
    ChunkFilterToJSON,
} from './ChunkFilter';

/**
 * 
 * @export
 * @interface SearchWithinGroupData
 */
export interface SearchWithinGroupData {
    /**
     * Set date_bias to true to bias search results towards more recent chunks. This will work best in hybrid search mode.
     * @type {boolean}
     * @memberof SearchWithinGroupData
     */
    dateBias?: boolean;
    /**
     * 
     * @type {ChunkFilter}
     * @memberof SearchWithinGroupData
     */
    filters?: ChunkFilter;
    /**
     * Group specifies the group to search within. Results will only consist of chunks which are bookmarks within the specified group.
     * @type {string}
     * @memberof SearchWithinGroupData
     */
    groupId?: string;
    /**
     * Group_tracking_id specifies the group to search within by tracking id. Results will only consist of chunks which are bookmarks within the specified group. If both group_id and group_tracking_id are provided, group_id will be used.
     * @type {string}
     * @memberof SearchWithinGroupData
     */
    groupTrackingId?: string;
    /**
     * Set highlight_delimiters to a list of strings to use as delimiters for highlighting. If not specified, this defaults to ["?", ",", ".", "!"].
     * @type {Array<string>}
     * @memberof SearchWithinGroupData
     */
    highlightDelimiters?: Array<string>;
    /**
     * Set highlight_results to true to highlight the results. If not specified, this defaults to true.
     * @type {boolean}
     * @memberof SearchWithinGroupData
     */
    highlightResults?: boolean;
    /**
     * The page of chunks to fetch. Page is 1-indexed.
     * @type {number}
     * @memberof SearchWithinGroupData
     */
    page?: number;
    /**
     * The page size is the number of chunks to fetch. This can be used to fetch more than 10 chunks at a time.
     * @type {number}
     * @memberof SearchWithinGroupData
     */
    pageSize?: number;
    /**
     * The query is the search query. This can be any string. The query will be used to create an embedding vector and/or SPLADE vector which will be used to find the result set.
     * @type {string}
     * @memberof SearchWithinGroupData
     */
    query: string;
    /**
     * Set score_threshold to a float to filter out chunks with a score below the threshold.
     * @type {number}
     * @memberof SearchWithinGroupData
     */
    scoreThreshold?: number;
    /**
     * Search_type can be either "semantic", "fulltext", or "hybrid". "hybrid" will pull in one page (10 chunks) of both semantic and full-text results then re-rank them using BAAI/bge-reranker-large. "semantic" will pull in one page (10 chunks) of the nearest cosine distant vectors. "fulltext" will pull in one page (10 chunks) of full-text results based on SPLADE.
     * @type {string}
     * @memberof SearchWithinGroupData
     */
    searchType: string;
    /**
     * Set slim_chunks to true to avoid returning the content and chunk_html of the chunks. This is useful for when you want to reduce amount of data over the wire for latency improvement. Default is false.
     * @type {boolean}
     * @memberof SearchWithinGroupData
     */
    slimChunks?: boolean;
    /**
     * Set use_weights to true to use the weights of the chunks in the result set in order to sort them. If not specified, this defaults to true.
     * @type {boolean}
     * @memberof SearchWithinGroupData
     */
    useWeights?: boolean;
}

/**
 * Check if a given object implements the SearchWithinGroupData interface.
 */
export function instanceOfSearchWithinGroupData(value: object): boolean {
    if (!('query' in value)) return false;
    if (!('searchType' in value)) return false;
    return true;
}

export function SearchWithinGroupDataFromJSON(json: any): SearchWithinGroupData {
    return SearchWithinGroupDataFromJSONTyped(json, false);
}

export function SearchWithinGroupDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchWithinGroupData {
    if (json == null) {
        return json;
    }
    return {
        
        'dateBias': json['date_bias'] == null ? undefined : json['date_bias'],
        'filters': json['filters'] == null ? undefined : ChunkFilterFromJSON(json['filters']),
        'groupId': json['group_id'] == null ? undefined : json['group_id'],
        'groupTrackingId': json['group_tracking_id'] == null ? undefined : json['group_tracking_id'],
        'highlightDelimiters': json['highlight_delimiters'] == null ? undefined : json['highlight_delimiters'],
        'highlightResults': json['highlight_results'] == null ? undefined : json['highlight_results'],
        'page': json['page'] == null ? undefined : json['page'],
        'pageSize': json['page_size'] == null ? undefined : json['page_size'],
        'query': json['query'],
        'scoreThreshold': json['score_threshold'] == null ? undefined : json['score_threshold'],
        'searchType': json['search_type'],
        'slimChunks': json['slim_chunks'] == null ? undefined : json['slim_chunks'],
        'useWeights': json['use_weights'] == null ? undefined : json['use_weights'],
    };
}

export function SearchWithinGroupDataToJSON(value?: SearchWithinGroupData | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'date_bias': value['dateBias'],
        'filters': ChunkFilterToJSON(value['filters']),
        'group_id': value['groupId'],
        'group_tracking_id': value['groupTrackingId'],
        'highlight_delimiters': value['highlightDelimiters'],
        'highlight_results': value['highlightResults'],
        'page': value['page'],
        'page_size': value['pageSize'],
        'query': value['query'],
        'score_threshold': value['scoreThreshold'],
        'search_type': value['searchType'],
        'slim_chunks': value['slimChunks'],
        'use_weights': value['useWeights'],
    };
}

