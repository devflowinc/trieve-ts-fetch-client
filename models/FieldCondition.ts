/* tslint:disable */
/* eslint-disable */
/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MatchCondition } from './MatchCondition';
import {
    MatchConditionFromJSON,
    MatchConditionFromJSONTyped,
    MatchConditionToJSON,
} from './MatchCondition';
import type { Range } from './Range';
import {
    RangeFromJSON,
    RangeFromJSONTyped,
    RangeToJSON,
} from './Range';

/**
 * 
 * @export
 * @interface FieldCondition
 */
export interface FieldCondition {
    /**
     * Field is the name of the field to filter on. The field value will be used to check for an exact substring match on the metadata values for each existing chunk. This is useful for when you want to filter chunks by arbitrary metadata. To access fields inside of the metadata that you provide with the card, prefix the field name with `metadata.`.
     * @type {string}
     * @memberof FieldCondition
     */
    field: string;
    /**
     * Match is the value to match on the field. The match value will be used to check for an exact substring match on the metadata values for each existing chunk. This is useful for when you want to filter chunks by arbitrary metadata.
     * @type {Array<MatchCondition>}
     * @memberof FieldCondition
     */
    match?: Array<MatchCondition>;
    /**
     * 
     * @type {Range}
     * @memberof FieldCondition
     */
    range?: Range;
}

/**
 * Check if a given object implements the FieldCondition interface.
 */
export function instanceOfFieldCondition(value: object): boolean {
    if (!('field' in value)) return false;
    return true;
}

export function FieldConditionFromJSON(json: any): FieldCondition {
    return FieldConditionFromJSONTyped(json, false);
}

export function FieldConditionFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldCondition {
    if (json == null) {
        return json;
    }
    return {
        
        'field': json['field'],
        'match': json['match'] == null ? undefined : ((json['match'] as Array<any>).map(MatchConditionFromJSON)),
        'range': json['range'] == null ? undefined : RangeFromJSON(json['range']),
    };
}

export function FieldConditionToJSON(value?: FieldCondition | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'field': value['field'],
        'match': value['match'] == null ? undefined : ((value['match'] as Array<any>).map(MatchConditionToJSON)),
        'range': RangeToJSON(value['range']),
    };
}

