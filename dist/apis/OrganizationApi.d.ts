/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CreateOrganizationData, Organization, OrganizationUsageCount, SlimUser, UpdateOrganizationData } from '../models/index';
export interface CreateOrganizationRequest {
    createOrganizationData: CreateOrganizationData;
}
export interface DeleteOrganizationByIdRequest {
    tROrganization: string;
    organizationId: string;
}
export interface GetOrganizationByIdRequest {
    tROrganization: string;
    organizationId: string;
}
export interface GetOrganizationUsageRequest {
    tROrganization: string;
    organizationId: string;
}
export interface GetOrganizationUsersRequest {
    tROrganization: string;
    organizationId: string;
}
export interface UpdateOrganizationRequest {
    tROrganization: string;
    updateOrganizationData: UpdateOrganizationData;
}
/**
 *
 */
export declare class OrganizationApi extends runtime.BaseAPI {
    /**
     * Create Organization  Create a new organization. The auth\'ed user who creates the organization will be the default owner of the organization.
     * Create Organization
     */
    createOrganizationRaw(requestParameters: CreateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>>;
    /**
     * Create Organization  Create a new organization. The auth\'ed user who creates the organization will be the default owner of the organization.
     * Create Organization
     */
    createOrganization(requestParameters: CreateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization>;
    /**
     * Delete Organization  Delete an organization by its id. The auth\'ed user must be an owner of the organization to delete it.
     * Delete Organization
     */
    deleteOrganizationByIdRaw(requestParameters: DeleteOrganizationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>>;
    /**
     * Delete Organization  Delete an organization by its id. The auth\'ed user must be an owner of the organization to delete it.
     * Delete Organization
     */
    deleteOrganizationById(requestParameters: DeleteOrganizationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization>;
    /**
     * Get Organization  Fetch the details of an organization by its id. The auth\'ed user must be an admin or owner of the organization to fetch it.
     * Get Organization
     */
    getOrganizationByIdRaw(requestParameters: GetOrganizationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>>;
    /**
     * Get Organization  Fetch the details of an organization by its id. The auth\'ed user must be an admin or owner of the organization to fetch it.
     * Get Organization
     */
    getOrganizationById(requestParameters: GetOrganizationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization>;
    /**
     * Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth\'ed user must be an admin or owner of the organization to fetch it.
     * Get Organization Usage
     */
    getOrganizationUsageRaw(requestParameters: GetOrganizationUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationUsageCount>>;
    /**
     * Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth\'ed user must be an admin or owner of the organization to fetch it.
     * Get Organization Usage
     */
    getOrganizationUsage(requestParameters: GetOrganizationUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationUsageCount>;
    /**
     * Get Organization Users  Fetch the users of an organization by its id. The auth\'ed user must be an admin or owner of the organization to fetch it.
     * Get Organization Users
     */
    getOrganizationUsersRaw(requestParameters: GetOrganizationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SlimUser>>>;
    /**
     * Get Organization Users  Fetch the users of an organization by its id. The auth\'ed user must be an admin or owner of the organization to fetch it.
     * Get Organization Users
     */
    getOrganizationUsers(requestParameters: GetOrganizationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SlimUser>>;
    /**
     * Update Organization  Update an organization. Only the owner of the organization can update it.
     * Update Organization
     */
    updateOrganizationRaw(requestParameters: UpdateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>>;
    /**
     * Update Organization  Update an organization. Only the owner of the organization can update it.
     * Update Organization
     */
    updateOrganization(requestParameters: UpdateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization>;
}
