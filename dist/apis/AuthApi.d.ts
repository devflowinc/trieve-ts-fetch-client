/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { SlimUser } from '../models/index';
export interface LoginRequest {
    organizationId?: string;
    redirectUri?: string;
    invCode?: string;
}
/**
 *
 */
export declare class AuthApi extends runtime.BaseAPI {
    /**
     * OpenID Connect callback  This is the callback route for the OAuth provider, it should not be called directly. Redirects to browser with set-cookie header.
     * OpenID Connect callback
     */
    callbackRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SlimUser>>;
    /**
     * OpenID Connect callback  This is the callback route for the OAuth provider, it should not be called directly. Redirects to browser with set-cookie header.
     * OpenID Connect callback
     */
    callback(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SlimUser>;
    /**
     * Get Me  Get the user corresponding to your current auth credentials.
     * Get Me
     */
    getMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SlimUser>>;
    /**
     * Get Me  Get the user corresponding to your current auth credentials.
     * Get Me
     */
    getMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SlimUser>;
    /**
     * Login  This will redirect you to the OAuth provider for authentication with email/pass, SSO, Google, Github, etc.
     * Login
     */
    loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Login  This will redirect you to the OAuth provider for authentication with email/pass, SSO, Google, Github, etc.
     * Login
     */
    login(requestParameters?: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Logout  Invalidate your current auth credential stored typically stored in a cookie. This does not invalidate your API key.
     * Logout
     */
    logoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Logout  Invalidate your current auth credential stored typically stored in a cookie. This does not invalidate your API key.
     * Logout
     */
    logout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
