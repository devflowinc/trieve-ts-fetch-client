"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChunkGroupApi = void 0;
var runtime = require("../runtime");
var index_1 = require("../models/index");
/**
 *
 */
var ChunkGroupApi = /** @class */ (function (_super) {
    __extends(ChunkGroupApi, _super);
    function ChunkGroupApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add Chunk to Group  Route to add a chunk to a group.
     * Add Chunk to Group
     */
    ChunkGroupApi.prototype.addChunkToGroupRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling addChunkToGroup().');
                        }
                        if (requestParameters['groupId'] == null) {
                            throw new runtime.RequiredError('groupId', 'Required parameter "groupId" was null or undefined when calling addChunkToGroup().');
                        }
                        if (requestParameters['addChunkToGroupData'] == null) {
                            throw new runtime.RequiredError('addChunkToGroupData', 'Required parameter "addChunkToGroupData" was null or undefined when calling addChunkToGroup().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group/chunk/{group_id}".replace("{".concat("group_id", "}"), encodeURIComponent(String(requestParameters['groupId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.AddChunkToGroupDataToJSON)(requestParameters['addChunkToGroupData']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Add Chunk to Group  Route to add a chunk to a group.
     * Add Chunk to Group
     */
    ChunkGroupApi.prototype.addChunkToGroup = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.addChunkToGroupRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
     * Add Chunk to Group by Tracking ID
     * @deprecated
     */
    ChunkGroupApi.prototype.addChunkToGroupByTrackingIdRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling addChunkToGroupByTrackingId().');
                        }
                        if (requestParameters['trackingId'] == null) {
                            throw new runtime.RequiredError('trackingId', 'Required parameter "trackingId" was null or undefined when calling addChunkToGroupByTrackingId().');
                        }
                        if (requestParameters['addChunkToGroupData'] == null) {
                            throw new runtime.RequiredError('addChunkToGroupData', 'Required parameter "addChunkToGroupData" was null or undefined when calling addChunkToGroupByTrackingId().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group/tracking_id/{tracking_id}".replace("{".concat("tracking_id", "}"), encodeURIComponent(String(requestParameters['trackingId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.AddChunkToGroupDataToJSON)(requestParameters['addChunkToGroupData']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
     * Add Chunk to Group by Tracking ID
     * @deprecated
     */
    ChunkGroupApi.prototype.addChunkToGroupByTrackingId = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.addChunkToGroupByTrackingIdRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
     * Create Chunk Group
     */
    ChunkGroupApi.prototype.createChunkGroupRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling createChunkGroup().');
                        }
                        if (requestParameters['createChunkGroupData'] == null) {
                            throw new runtime.RequiredError('createChunkGroupData', 'Required parameter "createChunkGroupData" was null or undefined when calling createChunkGroup().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.CreateChunkGroupDataToJSON)(requestParameters['createChunkGroupData']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ChunkGroupFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
     * Create Chunk Group
     */
    ChunkGroupApi.prototype.createChunkGroup = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createChunkGroupRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete Group  This will delete a chunk_group. If you set delete_chunks to true, it will also delete the chunks within the group.
     * Delete Group
     */
    ChunkGroupApi.prototype.deleteChunkGroupRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling deleteChunkGroup().');
                        }
                        if (requestParameters['groupId'] == null) {
                            throw new runtime.RequiredError('groupId', 'Required parameter "groupId" was null or undefined when calling deleteChunkGroup().');
                        }
                        if (requestParameters['deleteChunks'] == null) {
                            throw new runtime.RequiredError('deleteChunks', 'Required parameter "deleteChunks" was null or undefined when calling deleteChunkGroup().');
                        }
                        queryParameters = {};
                        if (requestParameters['deleteChunks'] != null) {
                            queryParameters['delete_chunks'] = requestParameters['deleteChunks'];
                        }
                        headerParameters = {};
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group/{group_id}".replace("{".concat("group_id", "}"), encodeURIComponent(String(requestParameters['groupId']))),
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete Group  This will delete a chunk_group. If you set delete_chunks to true, it will also delete the chunks within the group.
     * Delete Group
     */
    ChunkGroupApi.prototype.deleteChunkGroup = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteChunkGroupRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
     * Delete Group by Tracking ID
     */
    ChunkGroupApi.prototype.deleteGroupByTrackingIdRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling deleteGroupByTrackingId().');
                        }
                        if (requestParameters['trackingId'] == null) {
                            throw new runtime.RequiredError('trackingId', 'Required parameter "trackingId" was null or undefined when calling deleteGroupByTrackingId().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group/tracking_id/{tracking_id}".replace("{".concat("tracking_id", "}"), encodeURIComponent(String(requestParameters['trackingId']))),
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
     * Delete Group by Tracking ID
     */
    ChunkGroupApi.prototype.deleteGroupByTrackingId = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteGroupByTrackingIdRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get Group  Fetch the group with the given id. get_group
     * Get Group
     */
    ChunkGroupApi.prototype.getChunkGroupRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling getChunkGroup().');
                        }
                        if (requestParameters['groupId'] == null) {
                            throw new runtime.RequiredError('groupId', 'Required parameter "groupId" was null or undefined when calling getChunkGroup().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group/{group_id}".replace("{".concat("group_id", "}"), encodeURIComponent(String(requestParameters['groupId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ChunkGroupFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get Group  Fetch the group with the given id. get_group
     * Get Group
     */
    ChunkGroupApi.prototype.getChunkGroup = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getChunkGroupRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Page is 1-indexed.
     * Get Chunks in Group
     */
    ChunkGroupApi.prototype.getChunksInGroupRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling getChunksInGroup().');
                        }
                        if (requestParameters['groupId'] == null) {
                            throw new runtime.RequiredError('groupId', 'Required parameter "groupId" was null or undefined when calling getChunksInGroup().');
                        }
                        if (requestParameters['page'] == null) {
                            throw new runtime.RequiredError('page', 'Required parameter "page" was null or undefined when calling getChunksInGroup().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group/{group_id}/{page}".replace("{".concat("group_id", "}"), encodeURIComponent(String(requestParameters['groupId']))).replace("{".concat("page", "}"), encodeURIComponent(String(requestParameters['page']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.BookmarkDataFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Page is 1-indexed.
     * Get Chunks in Group
     */
    ChunkGroupApi.prototype.getChunksInGroup = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getChunksInGroupRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon. Page is 1-indexed.
     * Get Chunks in Group by Tracking ID
     */
    ChunkGroupApi.prototype.getChunksInGroupByTrackingIdRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling getChunksInGroupByTrackingId().');
                        }
                        if (requestParameters['groupTrackingId'] == null) {
                            throw new runtime.RequiredError('groupTrackingId', 'Required parameter "groupTrackingId" was null or undefined when calling getChunksInGroupByTrackingId().');
                        }
                        if (requestParameters['page'] == null) {
                            throw new runtime.RequiredError('page', 'Required parameter "page" was null or undefined when calling getChunksInGroupByTrackingId().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group/tracking_id/{group_tracking_id}/{page}".replace("{".concat("group_tracking_id", "}"), encodeURIComponent(String(requestParameters['groupTrackingId']))).replace("{".concat("page", "}"), encodeURIComponent(String(requestParameters['page']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.BookmarkDataFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon. Page is 1-indexed.
     * Get Chunks in Group by Tracking ID
     */
    ChunkGroupApi.prototype.getChunksInGroupByTrackingId = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getChunksInGroupByTrackingIdRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
     * Get Group by Tracking ID
     */
    ChunkGroupApi.prototype.getGroupByTrackingIdRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling getGroupByTrackingId().');
                        }
                        if (requestParameters['trackingId'] == null) {
                            throw new runtime.RequiredError('trackingId', 'Required parameter "trackingId" was null or undefined when calling getGroupByTrackingId().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group/tracking_id/{tracking_id}".replace("{".concat("tracking_id", "}"), encodeURIComponent(String(requestParameters['trackingId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ChunkGroupFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
     * Get Group by Tracking ID
     */
    ChunkGroupApi.prototype.getGroupByTrackingId = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getGroupByTrackingIdRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get Groups for Chunks  Route to get the groups that a chunk is in.
     * Get Groups for Chunks
     */
    ChunkGroupApi.prototype.getGroupsChunkIsInRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling getGroupsChunkIsIn().');
                        }
                        if (requestParameters['getGroupsForChunksData'] == null) {
                            throw new runtime.RequiredError('getGroupsForChunksData', 'Required parameter "getGroupsForChunksData" was null or undefined when calling getGroupsChunkIsIn().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group/chunks",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.GetGroupsForChunksDataToJSON)(requestParameters['getGroupsForChunksData']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(index_1.BookmarkGroupResultFromJSON); })];
                }
            });
        });
    };
    /**
     * Get Groups for Chunks  Route to get the groups that a chunk is in.
     * Get Groups for Chunks
     */
    ChunkGroupApi.prototype.getGroupsChunkIsIn = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getGroupsChunkIsInRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
     * Get Recommended Groups
     */
    ChunkGroupApi.prototype.getRecommendedGroupsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling getRecommendedGroups().');
                        }
                        if (requestParameters['recommendGroupChunksRequest'] == null) {
                            throw new runtime.RequiredError('recommendGroupChunksRequest', 'Required parameter "recommendGroupChunksRequest" was null or undefined when calling getRecommendedGroups().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group/recommend",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.RecommendGroupChunksRequestToJSON)(requestParameters['recommendGroupChunksRequest']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(index_1.GroupScoreChunkFromJSON); })];
                }
            });
        });
    };
    /**
     * Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
     * Get Recommended Groups
     */
    ChunkGroupApi.prototype.getRecommendedGroups = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRecommendedGroupsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
     * Get Groups for Dataset
     */
    ChunkGroupApi.prototype.getSpecificDatasetChunkGroupsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling getSpecificDatasetChunkGroups().');
                        }
                        if (requestParameters['datasetId'] == null) {
                            throw new runtime.RequiredError('datasetId', 'Required parameter "datasetId" was null or undefined when calling getSpecificDatasetChunkGroups().');
                        }
                        if (requestParameters['page'] == null) {
                            throw new runtime.RequiredError('page', 'Required parameter "page" was null or undefined when calling getSpecificDatasetChunkGroups().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/dataset/groups/{dataset_id}/{page}".replace("{".concat("dataset_id", "}"), encodeURIComponent(String(requestParameters['datasetId']))).replace("{".concat("page", "}"), encodeURIComponent(String(requestParameters['page']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.GroupDataFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
     * Get Groups for Dataset
     */
    ChunkGroupApi.prototype.getSpecificDatasetChunkGroups = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSpecificDatasetChunkGroupsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Remove Chunk from Group  Route to remove a chunk from a group.
     * Remove Chunk from Group
     */
    ChunkGroupApi.prototype.removeChunkFromGroupRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling removeChunkFromGroup().');
                        }
                        if (requestParameters['groupId'] == null) {
                            throw new runtime.RequiredError('groupId', 'Required parameter "groupId" was null or undefined when calling removeChunkFromGroup().');
                        }
                        if (requestParameters['createChunkGroupData'] == null) {
                            throw new runtime.RequiredError('createChunkGroupData', 'Required parameter "createChunkGroupData" was null or undefined when calling removeChunkFromGroup().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group/chunk/{group_id}".replace("{".concat("group_id", "}"), encodeURIComponent(String(requestParameters['groupId']))),
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.CreateChunkGroupDataToJSON)(requestParameters['createChunkGroupData']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Remove Chunk from Group  Route to remove a chunk from a group.
     * Remove Chunk from Group
     */
    ChunkGroupApi.prototype.removeChunkFromGroup = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.removeChunkFromGroupRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
     * Search Over Groups
     */
    ChunkGroupApi.prototype.searchOverGroupsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling searchOverGroups().');
                        }
                        if (requestParameters['searchOverGroupsData'] == null) {
                            throw new runtime.RequiredError('searchOverGroupsData', 'Required parameter "searchOverGroupsData" was null or undefined when calling searchOverGroups().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group/group_oriented_search",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.SearchOverGroupsDataToJSON)(requestParameters['searchOverGroupsData']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SearchOverGroupsResultsFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
     * Search Over Groups
     */
    ChunkGroupApi.prototype.searchOverGroups = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.searchOverGroupsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
     * Search Within Group
     */
    ChunkGroupApi.prototype.searchWithinGroupRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling searchWithinGroup().');
                        }
                        if (requestParameters['searchWithinGroupData'] == null) {
                            throw new runtime.RequiredError('searchWithinGroupData', 'Required parameter "searchWithinGroupData" was null or undefined when calling searchWithinGroup().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group/search",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.SearchWithinGroupDataToJSON)(requestParameters['searchWithinGroupData']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SearchWithinGroupResultsFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
     * Search Within Group
     */
    ChunkGroupApi.prototype.searchWithinGroup = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.searchWithinGroupRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
     * Update Group
     */
    ChunkGroupApi.prototype.updateChunkGroupRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling updateChunkGroup().');
                        }
                        if (requestParameters['updateChunkGroupData'] == null) {
                            throw new runtime.RequiredError('updateChunkGroupData', 'Required parameter "updateChunkGroupData" was null or undefined when calling updateChunkGroup().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group",
                            method: 'PUT',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.UpdateChunkGroupDataToJSON)(requestParameters['updateChunkGroupData']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
     * Update Group
     */
    ChunkGroupApi.prototype.updateChunkGroup = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateChunkGroupRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Update Group by Tracking ID  Update a chunk_group with the given tracking id.
     * Update Group by Tracking ID
     * @deprecated
     */
    ChunkGroupApi.prototype.updateGroupByTrackingIdRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tRDataset'] == null) {
                            throw new runtime.RequiredError('tRDataset', 'Required parameter "tRDataset" was null or undefined when calling updateGroupByTrackingId().');
                        }
                        if (requestParameters['trackingId'] == null) {
                            throw new runtime.RequiredError('trackingId', 'Required parameter "trackingId" was null or undefined when calling updateGroupByTrackingId().');
                        }
                        if (requestParameters['updateGroupByTrackingIDData'] == null) {
                            throw new runtime.RequiredError('updateGroupByTrackingIDData', 'Required parameter "updateGroupByTrackingIDData" was null or undefined when calling updateGroupByTrackingId().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (requestParameters['tRDataset'] != null) {
                            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
                        }
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "Authorization";
                        return [4 /*yield*/, this.configuration.apiKey("Authorization")];
                    case 1:
                        _a[_b] = _c.sent(); // ApiKey authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/api/chunk_group/tracking_id/{tracking_id}".replace("{".concat("tracking_id", "}"), encodeURIComponent(String(requestParameters['trackingId']))),
                            method: 'PUT',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.UpdateGroupByTrackingIDDataToJSON)(requestParameters['updateGroupByTrackingIDData']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Update Group by Tracking ID  Update a chunk_group with the given tracking id.
     * Update Group by Tracking ID
     * @deprecated
     */
    ChunkGroupApi.prototype.updateGroupByTrackingId = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateGroupByTrackingIdRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return ChunkGroupApi;
}(runtime.BaseAPI));
exports.ChunkGroupApi = ChunkGroupApi;
