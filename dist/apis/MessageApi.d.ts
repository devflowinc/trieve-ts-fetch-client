/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CreateMessageData, EditMessageData, Message, RegenerateMessageData } from '../models/index';
export interface CreateMessageCompletionHandlerRequest {
    tRDataset: string;
    createMessageData: CreateMessageData;
}
export interface EditMessageHandlerRequest {
    tRDataset: string;
    editMessageData: EditMessageData;
}
export interface GetAllTopicMessagesRequest {
    tRDataset: string;
    messagesTopicId: string;
}
export interface RegenerateMessageHandlerRequest {
    tRDataset: string;
    regenerateMessageData: RegenerateMessageData;
}
/**
 *
 */
export declare class MessageApi extends runtime.BaseAPI {
    /**
     * Create a message  Create a message. Messages are attached to topics in order to coordinate memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon. Currently, you can only send user messages. If the topic is a RAG topic then the response will include Chunks first on the stream. The structure will look like `[chunks]||mesage`. See docs.trieve.ai for more information.
     * Create a message
     */
    createMessageCompletionHandlerRaw(requestParameters: CreateMessageCompletionHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;
    /**
     * Create a message  Create a message. Messages are attached to topics in order to coordinate memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon. Currently, you can only send user messages. If the topic is a RAG topic then the response will include Chunks first on the stream. The structure will look like `[chunks]||mesage`. See docs.trieve.ai for more information.
     * Create a message
     */
    createMessageCompletionHandler(requestParameters: CreateMessageCompletionHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;
    /**
     * Edit a message  Edit a message which exists within the topic\'s chat history. This will delete the message and replace it with a new message. The new message will be generated by the AI based on the new content provided in the request body. The response will include Chunks first on the stream if the topic is using RAG. The structure will look like `[chunks]||mesage`. See docs.trieve.ai for more information.
     * Edit a message
     */
    editMessageHandlerRaw(requestParameters: EditMessageHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Edit a message  Edit a message which exists within the topic\'s chat history. This will delete the message and replace it with a new message. The new message will be generated by the AI based on the new content provided in the request body. The response will include Chunks first on the stream if the topic is using RAG. The structure will look like `[chunks]||mesage`. See docs.trieve.ai for more information.
     * Edit a message
     */
    editMessageHandler(requestParameters: EditMessageHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Get all messages for a given topic  Get all messages for a given topic. If the topic is a RAG topic then the response will include Chunks first on each message. The structure will look like `[chunks]||mesage`. See docs.trieve.ai for more information.
     * Get all messages for a given topic
     */
    getAllTopicMessagesRaw(requestParameters: GetAllTopicMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Message>>>;
    /**
     * Get all messages for a given topic  Get all messages for a given topic. If the topic is a RAG topic then the response will include Chunks first on each message. The structure will look like `[chunks]||mesage`. See docs.trieve.ai for more information.
     * Get all messages for a given topic
     */
    getAllTopicMessages(requestParameters: GetAllTopicMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Message>>;
    /**
     * Regenerate message  Regenerate the assistant response to the last user message of a topic. This will delete the last message and replace it with a new message. The response will include Chunks first on the stream if the topic is using RAG. The structure will look like `[chunks]||mesage`. See docs.trieve.ai for more information.
     * Regenerate message
     */
    regenerateMessageHandlerRaw(requestParameters: RegenerateMessageHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;
    /**
     * Regenerate message  Regenerate the assistant response to the last user message of a topic. This will delete the last message and replace it with a new message. The response will include Chunks first on the stream if the topic is using RAG. The structure will look like `[chunks]||mesage`. See docs.trieve.ai for more information.
     * Regenerate message
     */
    regenerateMessageHandler(requestParameters: RegenerateMessageHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;
}
