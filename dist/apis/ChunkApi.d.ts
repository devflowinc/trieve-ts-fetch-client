/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ChunkMetadata, ChunkMetadataWithScore, CreateChunkData, GenerateChunksRequest, RecommendChunksRequest, ReturnQueuedChunk, SearchChunkData, SearchChunkQueryResponseBody, SuggestedQueriesRequest, SuggestedQueriesResponse, UpdateChunkByTrackingIdData, UpdateChunkData } from '../models/index';
export interface CreateChunkRequest {
    tRDataset: string;
    createChunkData: CreateChunkData;
}
export interface CreateSuggestedQueriesHandlerRequest {
    tRDataset: string;
    suggestedQueriesRequest: SuggestedQueriesRequest;
}
export interface DeleteChunkRequest {
    tRDataset: string;
    chunkId: string;
}
export interface DeleteChunkByTrackingIdRequest {
    tRDataset: string;
    trackingId: string;
}
export interface GenerateOffChunksRequest {
    tRDataset: string;
    generateChunksRequest: GenerateChunksRequest;
}
export interface GetChunkByIdRequest {
    tRDataset: string;
    chunkId: string;
}
export interface GetChunkByTrackingIdRequest {
    tRDataset: string;
    trackingId: string;
}
export interface GetRecommendedChunksRequest {
    tRDataset: string;
    recommendChunksRequest: RecommendChunksRequest;
}
export interface SearchChunkRequest {
    tRDataset: string;
    searchChunkData: SearchChunkData;
}
export interface UpdateChunkRequest {
    tRDataset: string;
    updateChunkData: UpdateChunkData;
}
export interface UpdateChunkByTrackingIdRequest {
    tRDataset: string;
    updateChunkByTrackingIdData: UpdateChunkByTrackingIdData;
}
/**
 *
 */
export declare class ChunkApi extends runtime.BaseAPI {
    /**
     * Create or Upsert Chunk or Chunks  Create a new chunk. If the chunk has the same tracking_id as an existing chunk, the request will fail. Once a chunk is created, it can be searched for using the search endpoint.
     * Create or Upsert Chunk or Chunks
     */
    createChunkRaw(requestParameters: CreateChunkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnQueuedChunk>>;
    /**
     * Create or Upsert Chunk or Chunks  Create a new chunk. If the chunk has the same tracking_id as an existing chunk, the request will fail. Once a chunk is created, it can be searched for using the search endpoint.
     * Create or Upsert Chunk or Chunks
     */
    createChunk(requestParameters: CreateChunkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnQueuedChunk>;
    /**
     * Generate suggested queries  This endpoint will generate 3 suggested queries based off the query provided in the request body and return them as a JSON object.
     * Generate suggested queries
     */
    createSuggestedQueriesHandlerRaw(requestParameters: CreateSuggestedQueriesHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestedQueriesResponse>>;
    /**
     * Generate suggested queries  This endpoint will generate 3 suggested queries based off the query provided in the request body and return them as a JSON object.
     * Generate suggested queries
     */
    createSuggestedQueriesHandler(requestParameters: CreateSuggestedQueriesHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestedQueriesResponse>;
    /**
     * Delete Chunk  Delete a chunk by its id. If deleting a root chunk which has a collision, the most recently created collision will become a new root chunk.
     * Delete Chunk
     */
    deleteChunkRaw(requestParameters: DeleteChunkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete Chunk  Delete a chunk by its id. If deleting a root chunk which has a collision, the most recently created collision will become a new root chunk.
     * Delete Chunk
     */
    deleteChunk(requestParameters: DeleteChunkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Delete Chunk By Tracking Id  Delete a chunk by tracking_id. This is useful for when you are coordinating with an external system and want to use the tracking_id to identify the chunk. If deleting a root chunk which has a collision, the most recently created collision will become a new root chunk.
     * Delete Chunk By Tracking Id
     */
    deleteChunkByTrackingIdRaw(requestParameters: DeleteChunkByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete Chunk By Tracking Id  Delete a chunk by tracking_id. This is useful for when you are coordinating with an external system and want to use the tracking_id to identify the chunk. If deleting a root chunk which has a collision, the most recently created collision will become a new root chunk.
     * Delete Chunk By Tracking Id
     */
    deleteChunkByTrackingId(requestParameters: DeleteChunkByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * RAG on Specified Chunks  This endpoint exists as an alternative to the topic+message concept where our API handles chat memory. With this endpoint, the user is responsible for providing the context window and the prompt. See more in the \"search before generate\" page at docs.trieve.ai.
     * RAG on Specified Chunks
     */
    generateOffChunksRaw(requestParameters: GenerateOffChunksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;
    /**
     * RAG on Specified Chunks  This endpoint exists as an alternative to the topic+message concept where our API handles chat memory. With this endpoint, the user is responsible for providing the context window and the prompt. See more in the \"search before generate\" page at docs.trieve.ai.
     * RAG on Specified Chunks
     */
    generateOffChunks(requestParameters: GenerateOffChunksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;
    /**
     * Get Chunk By Id  Get a singular chunk by id.
     * Get Chunk By Id
     */
    getChunkByIdRaw(requestParameters: GetChunkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChunkMetadata>>;
    /**
     * Get Chunk By Id  Get a singular chunk by id.
     * Get Chunk By Id
     */
    getChunkById(requestParameters: GetChunkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChunkMetadata>;
    /**
     * Get Chunk By Tracking Id  Get a singular chunk by tracking_id. This is useful for when you are coordinating with an external system and want to use your own id as the primary reference for a chunk.
     * Get Chunk By Tracking Id
     */
    getChunkByTrackingIdRaw(requestParameters: GetChunkByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChunkMetadata>>;
    /**
     * Get Chunk By Tracking Id  Get a singular chunk by tracking_id. This is useful for when you are coordinating with an external system and want to use your own id as the primary reference for a chunk.
     * Get Chunk By Tracking Id
     */
    getChunkByTrackingId(requestParameters: GetChunkByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChunkMetadata>;
    /**
     * Get Recommended Chunks  Get recommendations of chunks similar to the chunks in the request. Think about this as a feature similar to the \"add to playlist\" recommendation feature on Spotify. This request pairs especially well with our groups endpoint.
     * Get Recommended Chunks
     */
    getRecommendedChunksRaw(requestParameters: GetRecommendedChunksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChunkMetadataWithScore>>>;
    /**
     * Get Recommended Chunks  Get recommendations of chunks similar to the chunks in the request. Think about this as a feature similar to the \"add to playlist\" recommendation feature on Spotify. This request pairs especially well with our groups endpoint.
     * Get Recommended Chunks
     */
    getRecommendedChunks(requestParameters: GetRecommendedChunksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChunkMetadataWithScore>>;
    /**
     * Search  This route provides the primary search functionality for the API. It can be used to search for chunks by semantic similarity, full-text similarity, or a combination of both. Results\' `chunk_html` values will be modified with `<b><mark>` tags for sub-sentence highlighting.
     * Search
     */
    searchChunkRaw(requestParameters: SearchChunkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchChunkQueryResponseBody>>;
    /**
     * Search  This route provides the primary search functionality for the API. It can be used to search for chunks by semantic similarity, full-text similarity, or a combination of both. Results\' `chunk_html` values will be modified with `<b><mark>` tags for sub-sentence highlighting.
     * Search
     */
    searchChunk(requestParameters: SearchChunkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchChunkQueryResponseBody>;
    /**
     * Update Chunk  Update a chunk. If you try to change the tracking_id of the chunk to have the same tracking_id as an existing chunk, the request will fail.
     * Update Chunk
     */
    updateChunkRaw(requestParameters: UpdateChunkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Update Chunk  Update a chunk. If you try to change the tracking_id of the chunk to have the same tracking_id as an existing chunk, the request will fail.
     * Update Chunk
     */
    updateChunk(requestParameters: UpdateChunkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Update Chunk By Tracking Id  Update a chunk by tracking_id. This is useful for when you are coordinating with an external system and want to use the tracking_id to identify the chunk.
     * Update Chunk By Tracking Id
     * @deprecated
     */
    updateChunkByTrackingIdRaw(requestParameters: UpdateChunkByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Update Chunk By Tracking Id  Update a chunk by tracking_id. This is useful for when you are coordinating with an external system and want to use the tracking_id to identify the chunk.
     * Update Chunk By Tracking Id
     * @deprecated
     */
    updateChunkByTrackingId(requestParameters: UpdateChunkByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
