/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AddChunkToGroupData, BookmarkData, BookmarkGroupResult, ChunkGroup, CreateChunkGroupData, GetGroupsForChunksData, GroupData, GroupScoreChunk, RecommendGroupChunksRequest, SearchOverGroupsData, SearchOverGroupsResults, SearchWithinGroupData, SearchWithinGroupResults, UpdateChunkGroupData, UpdateGroupByTrackingIDData } from '../models/index';
export interface AddChunkToGroupRequest {
    tRDataset: string;
    groupId: string;
    addChunkToGroupData: AddChunkToGroupData;
}
export interface AddChunkToGroupByTrackingIdRequest {
    tRDataset: string;
    trackingId: string;
    addChunkToGroupData: AddChunkToGroupData;
}
export interface CreateChunkGroupRequest {
    tRDataset: string;
    createChunkGroupData: CreateChunkGroupData;
}
export interface DeleteChunkGroupRequest {
    tRDataset: string;
    groupId: string;
    deleteChunks: boolean;
}
export interface DeleteGroupByTrackingIdRequest {
    tRDataset: string;
    trackingId: string;
}
export interface GetChunkGroupRequest {
    tRDataset: string;
    groupId: string;
}
export interface GetChunksInGroupRequest {
    tRDataset: string;
    groupId: string;
    page: number | null;
}
export interface GetChunksInGroupByTrackingIdRequest {
    tRDataset: string;
    groupTrackingId: string;
    page: number;
}
export interface GetGroupByTrackingIdRequest {
    tRDataset: string;
    trackingId: string;
}
export interface GetGroupsChunkIsInRequest {
    tRDataset: string;
    getGroupsForChunksData: GetGroupsForChunksData;
}
export interface GetRecommendedGroupsRequest {
    tRDataset: string;
    recommendGroupChunksRequest: RecommendGroupChunksRequest;
}
export interface GetSpecificDatasetChunkGroupsRequest {
    tRDataset: string;
    datasetId: string;
    page: number;
}
export interface RemoveChunkFromGroupRequest {
    tRDataset: string;
    groupId: string;
    createChunkGroupData: CreateChunkGroupData;
}
export interface SearchOverGroupsRequest {
    tRDataset: string;
    searchOverGroupsData: SearchOverGroupsData;
}
export interface SearchWithinGroupRequest {
    tRDataset: string;
    searchWithinGroupData: SearchWithinGroupData;
}
export interface UpdateChunkGroupRequest {
    tRDataset: string;
    updateChunkGroupData: UpdateChunkGroupData;
}
export interface UpdateGroupByTrackingIdRequest {
    tRDataset: string;
    trackingId: string;
    updateGroupByTrackingIDData: UpdateGroupByTrackingIDData;
}
/**
 *
 */
export declare class ChunkGroupApi extends runtime.BaseAPI {
    /**
     * Add Chunk to Group  Route to add a chunk to a group.
     * Add Chunk to Group
     */
    addChunkToGroupRaw(requestParameters: AddChunkToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Add Chunk to Group  Route to add a chunk to a group.
     * Add Chunk to Group
     */
    addChunkToGroup(requestParameters: AddChunkToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
     * Add Chunk to Group by Tracking ID
     * @deprecated
     */
    addChunkToGroupByTrackingIdRaw(requestParameters: AddChunkToGroupByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
     * Add Chunk to Group by Tracking ID
     * @deprecated
     */
    addChunkToGroupByTrackingId(requestParameters: AddChunkToGroupByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
     * Create Chunk Group
     */
    createChunkGroupRaw(requestParameters: CreateChunkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChunkGroup>>;
    /**
     * Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
     * Create Chunk Group
     */
    createChunkGroup(requestParameters: CreateChunkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChunkGroup>;
    /**
     * Delete Group  This will delete a chunk_group. If you set delete_chunks to true, it will also delete the chunks within the group.
     * Delete Group
     */
    deleteChunkGroupRaw(requestParameters: DeleteChunkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete Group  This will delete a chunk_group. If you set delete_chunks to true, it will also delete the chunks within the group.
     * Delete Group
     */
    deleteChunkGroup(requestParameters: DeleteChunkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
     * Delete Group by Tracking ID
     */
    deleteGroupByTrackingIdRaw(requestParameters: DeleteGroupByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
     * Delete Group by Tracking ID
     */
    deleteGroupByTrackingId(requestParameters: DeleteGroupByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Get Group  Fetch the group with the given id. get_group
     * Get Group
     */
    getChunkGroupRaw(requestParameters: GetChunkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChunkGroup>>;
    /**
     * Get Group  Fetch the group with the given id. get_group
     * Get Group
     */
    getChunkGroup(requestParameters: GetChunkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChunkGroup>;
    /**
     * Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Page is 1-indexed.
     * Get Chunks in Group
     */
    getChunksInGroupRaw(requestParameters: GetChunksInGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarkData>>;
    /**
     * Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Page is 1-indexed.
     * Get Chunks in Group
     */
    getChunksInGroup(requestParameters: GetChunksInGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarkData>;
    /**
     * Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon. Page is 1-indexed.
     * Get Chunks in Group by Tracking ID
     */
    getChunksInGroupByTrackingIdRaw(requestParameters: GetChunksInGroupByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarkData>>;
    /**
     * Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon. Page is 1-indexed.
     * Get Chunks in Group by Tracking ID
     */
    getChunksInGroupByTrackingId(requestParameters: GetChunksInGroupByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarkData>;
    /**
     * Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
     * Get Group by Tracking ID
     */
    getGroupByTrackingIdRaw(requestParameters: GetGroupByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChunkGroup>>;
    /**
     * Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
     * Get Group by Tracking ID
     */
    getGroupByTrackingId(requestParameters: GetGroupByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChunkGroup>;
    /**
     * Get Groups for Chunks  Route to get the groups that a chunk is in.
     * Get Groups for Chunks
     */
    getGroupsChunkIsInRaw(requestParameters: GetGroupsChunkIsInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BookmarkGroupResult>>>;
    /**
     * Get Groups for Chunks  Route to get the groups that a chunk is in.
     * Get Groups for Chunks
     */
    getGroupsChunkIsIn(requestParameters: GetGroupsChunkIsInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BookmarkGroupResult>>;
    /**
     * Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
     * Get Recommended Groups
     */
    getRecommendedGroupsRaw(requestParameters: GetRecommendedGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupScoreChunk>>>;
    /**
     * Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
     * Get Recommended Groups
     */
    getRecommendedGroups(requestParameters: GetRecommendedGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupScoreChunk>>;
    /**
     * Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
     * Get Groups for Dataset
     */
    getSpecificDatasetChunkGroupsRaw(requestParameters: GetSpecificDatasetChunkGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupData>>;
    /**
     * Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
     * Get Groups for Dataset
     */
    getSpecificDatasetChunkGroups(requestParameters: GetSpecificDatasetChunkGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupData>;
    /**
     * Remove Chunk from Group  Route to remove a chunk from a group.
     * Remove Chunk from Group
     */
    removeChunkFromGroupRaw(requestParameters: RemoveChunkFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove Chunk from Group  Route to remove a chunk from a group.
     * Remove Chunk from Group
     */
    removeChunkFromGroup(requestParameters: RemoveChunkFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
     * Search Over Groups
     */
    searchOverGroupsRaw(requestParameters: SearchOverGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchOverGroupsResults>>;
    /**
     * Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
     * Search Over Groups
     */
    searchOverGroups(requestParameters: SearchOverGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchOverGroupsResults>;
    /**
     * Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
     * Search Within Group
     */
    searchWithinGroupRaw(requestParameters: SearchWithinGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchWithinGroupResults>>;
    /**
     * Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
     * Search Within Group
     */
    searchWithinGroup(requestParameters: SearchWithinGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchWithinGroupResults>;
    /**
     * Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
     * Update Group
     */
    updateChunkGroupRaw(requestParameters: UpdateChunkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
     * Update Group
     */
    updateChunkGroup(requestParameters: UpdateChunkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Update Group by Tracking ID  Update a chunk_group with the given tracking id.
     * Update Group by Tracking ID
     * @deprecated
     */
    updateGroupByTrackingIdRaw(requestParameters: UpdateGroupByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Update Group by Tracking ID  Update a chunk_group with the given tracking id.
     * Update Group by Tracking ID
     * @deprecated
     */
    updateGroupByTrackingId(requestParameters: UpdateGroupByTrackingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
