/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface UpdateChunkByTrackingIdData
 */
export interface UpdateChunkByTrackingIdData {
    /**
     * HTML content of the chunk you want to update. This can also be plaintext. The innerText of the HTML will be used to create the embedding vector. The point of using HTML is for convienience, as some users have applications where users submit HTML content. If no chunk_html is provided, the existing chunk_html will be used.
     * @type {string}
     * @memberof UpdateChunkByTrackingIdData
     */
    chunkHtml?: string;
    /**
     * Convert HTML to raw text before processing to avoid adding noise to the vector embeddings. By default this is true. If you are using HTML content that you want to be included in the vector embeddings, set this to false.
     * @type {boolean}
     * @memberof UpdateChunkByTrackingIdData
     */
    convertHtmlToText?: boolean;
    /**
     * Group ids are the ids of the groups that the chunk should be placed into. This is useful for when you want to update a chunk and add it to a group or multiple groups in one request.
     * @type {Array<string>}
     * @memberof UpdateChunkByTrackingIdData
     */
    groupIds?: Array<string>;
    /**
     * Group tracking_ids are the tracking_ids of the groups that the chunk should be placed into. This is useful for when you want to update a chunk and add it to a group or multiple groups in one request.
     * @type {Array<string>}
     * @memberof UpdateChunkByTrackingIdData
     */
    groupTrackingIds?: Array<string>;
    /**
     * Link of the chunk you want to update. This can also be any string. Frequently, this is a link to the source of the chunk. The link value will not affect the embedding creation. If no link is provided, the existing link will be used.
     * @type {string}
     * @memberof UpdateChunkByTrackingIdData
     */
    link?: string;
    /**
     * The metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata. If no metadata is provided, the existing metadata will be used.
     * @type {any}
     * @memberof UpdateChunkByTrackingIdData
     */
    metadata?: any;
    /**
     * Time_stamp should be an ISO 8601 combined date and time without timezone. It is used for time window filtering and recency-biasing search results. If no time_stamp is provided, the existing time_stamp will be used.
     * @type {string}
     * @memberof UpdateChunkByTrackingIdData
     */
    timeStamp?: string;
    /**
     * Tracking_id of the chunk you want to update. This is required to match an existing chunk.
     * @type {string}
     * @memberof UpdateChunkByTrackingIdData
     */
    trackingId: string;
    /**
     * Weight is a float which can be used to bias search results. This is useful for when you want to bias search results for a chunk. The magnitude only matters relative to other chunks in the chunk's dataset dataset. If no weight is provided, the existing weight will be used.
     * @type {number}
     * @memberof UpdateChunkByTrackingIdData
     */
    weight?: number;
}
/**
 * Check if a given object implements the UpdateChunkByTrackingIdData interface.
 */
export declare function instanceOfUpdateChunkByTrackingIdData(value: object): boolean;
export declare function UpdateChunkByTrackingIdDataFromJSON(json: any): UpdateChunkByTrackingIdData;
export declare function UpdateChunkByTrackingIdDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateChunkByTrackingIdData;
export declare function UpdateChunkByTrackingIdDataToJSON(value?: UpdateChunkByTrackingIdData | null): any;
