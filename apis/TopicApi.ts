/* tslint:disable */
/* eslint-disable */
/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTopicData,
  ErrorResponseBody,
  Topic,
  UpdateTopicData,
} from '../models/index';
import {
    CreateTopicDataFromJSON,
    CreateTopicDataToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    TopicFromJSON,
    TopicToJSON,
    UpdateTopicDataFromJSON,
    UpdateTopicDataToJSON,
} from '../models/index';

export interface CreateTopicRequest {
    tRDataset: string;
    createTopicData: CreateTopicData;
}

export interface DeleteTopicRequest {
    tRDataset: string;
    topicId: string;
}

export interface GetAllTopicsForUserRequest {
    userId: string;
    tRDataset: string;
}

export interface UpdateTopicRequest {
    tRDataset: string;
    updateTopicData: UpdateTopicData;
}

/**
 * 
 */
export class TopicApi extends runtime.BaseAPI {

    /**
     * Create Topic  Create a new chat topic. Topics are attached to a user and act as a coordinator for memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon.
     * Create Topic
     */
    async createTopicRaw(requestParameters: CreateTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Topic>> {
        if (requestParameters['tRDataset'] == null) {
            throw new runtime.RequiredError(
                'tRDataset',
                'Required parameter "tRDataset" was null or undefined when calling createTopic().'
            );
        }

        if (requestParameters['createTopicData'] == null) {
            throw new runtime.RequiredError(
                'createTopicData',
                'Required parameter "createTopicData" was null or undefined when calling createTopic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['tRDataset'] != null) {
            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/topic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTopicDataToJSON(requestParameters['createTopicData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TopicFromJSON(jsonValue));
    }

    /**
     * Create Topic  Create a new chat topic. Topics are attached to a user and act as a coordinator for memory of gen-AI chat sessions. We are considering refactoring this resource of the API soon.
     * Create Topic
     */
    async createTopic(requestParameters: CreateTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Topic> {
        const response = await this.createTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Topic  Delete an existing chat topic. When a topic is deleted, all associated chat messages are also deleted.
     * Delete Topic
     */
    async deleteTopicRaw(requestParameters: DeleteTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tRDataset'] == null) {
            throw new runtime.RequiredError(
                'tRDataset',
                'Required parameter "tRDataset" was null or undefined when calling deleteTopic().'
            );
        }

        if (requestParameters['topicId'] == null) {
            throw new runtime.RequiredError(
                'topicId',
                'Required parameter "topicId" was null or undefined when calling deleteTopic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tRDataset'] != null) {
            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/topic/{topic_id}`.replace(`{${"topic_id"}}`, encodeURIComponent(String(requestParameters['topicId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Topic  Delete an existing chat topic. When a topic is deleted, all associated chat messages are also deleted.
     * Delete Topic
     */
    async deleteTopic(requestParameters: DeleteTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTopicRaw(requestParameters, initOverrides);
    }

    /**
     * Get All Topics for User  Get all topics belonging to a the auth\'ed user. Soon, we plan to allow specification of the user for this route and include pagination.
     * Get All Topics for User
     */
    async getAllTopicsForUserRaw(requestParameters: GetAllTopicsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Topic>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getAllTopicsForUser().'
            );
        }

        if (requestParameters['tRDataset'] == null) {
            throw new runtime.RequiredError(
                'tRDataset',
                'Required parameter "tRDataset" was null or undefined when calling getAllTopicsForUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tRDataset'] != null) {
            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/topic/user/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TopicFromJSON));
    }

    /**
     * Get All Topics for User  Get all topics belonging to a the auth\'ed user. Soon, we plan to allow specification of the user for this route and include pagination.
     * Get All Topics for User
     */
    async getAllTopicsForUser(requestParameters: GetAllTopicsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Topic>> {
        const response = await this.getAllTopicsForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Topic  Update an existing chat topic. Currently, only the name of the topic can be updated.
     * Update Topic
     */
    async updateTopicRaw(requestParameters: UpdateTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tRDataset'] == null) {
            throw new runtime.RequiredError(
                'tRDataset',
                'Required parameter "tRDataset" was null or undefined when calling updateTopic().'
            );
        }

        if (requestParameters['updateTopicData'] == null) {
            throw new runtime.RequiredError(
                'updateTopicData',
                'Required parameter "updateTopicData" was null or undefined when calling updateTopic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['tRDataset'] != null) {
            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/topic`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTopicDataToJSON(requestParameters['updateTopicData']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Topic  Update an existing chat topic. Currently, only the name of the topic can be updated.
     * Update Topic
     */
    async updateTopic(requestParameters: UpdateTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTopicRaw(requestParameters, initOverrides);
    }

}
