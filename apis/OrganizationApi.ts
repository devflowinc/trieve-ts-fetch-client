/* tslint:disable */
/* eslint-disable */
/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOrganizationData,
  ErrorResponseBody,
  Organization,
  OrganizationUsageCount,
  SlimUser,
  UpdateOrganizationData,
} from '../models/index';
import {
    CreateOrganizationDataFromJSON,
    CreateOrganizationDataToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    OrganizationFromJSON,
    OrganizationToJSON,
    OrganizationUsageCountFromJSON,
    OrganizationUsageCountToJSON,
    SlimUserFromJSON,
    SlimUserToJSON,
    UpdateOrganizationDataFromJSON,
    UpdateOrganizationDataToJSON,
} from '../models/index';

export interface CreateOrganizationRequest {
    createOrganizationData: CreateOrganizationData;
}

export interface DeleteOrganizationByIdRequest {
    tROrganization: string;
    organizationId: string;
}

export interface GetOrganizationByIdRequest {
    tROrganization: string;
    organizationId: string;
}

export interface GetOrganizationUsageRequest {
    tROrganization: string;
    organizationId: string;
}

export interface GetOrganizationUsersRequest {
    tROrganization: string;
    organizationId: string;
}

export interface UpdateOrganizationRequest {
    tROrganization: string;
    updateOrganizationData: UpdateOrganizationData;
}

/**
 * 
 */
export class OrganizationApi extends runtime.BaseAPI {

    /**
     * Create Organization  Create a new organization. The auth\'ed user who creates the organization will be the default owner of the organization.
     * Create Organization
     */
    async createOrganizationRaw(requestParameters: CreateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters['createOrganizationData'] == null) {
            throw new runtime.RequiredError(
                'createOrganizationData',
                'Required parameter "createOrganizationData" was null or undefined when calling createOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/organization`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationDataToJSON(requestParameters['createOrganizationData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Create Organization  Create a new organization. The auth\'ed user who creates the organization will be the default owner of the organization.
     * Create Organization
     */
    async createOrganization(requestParameters: CreateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization> {
        const response = await this.createOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Organization  Delete an organization by its id. The auth\'ed user must be an owner of the organization to delete it.
     * Delete Organization
     */
    async deleteOrganizationByIdRaw(requestParameters: DeleteOrganizationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters['tROrganization'] == null) {
            throw new runtime.RequiredError(
                'tROrganization',
                'Required parameter "tROrganization" was null or undefined when calling deleteOrganizationById().'
            );
        }

        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling deleteOrganizationById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tROrganization'] != null) {
            headerParameters['TR-Organization'] = String(requestParameters['tROrganization']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/organization/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Delete Organization  Delete an organization by its id. The auth\'ed user must be an owner of the organization to delete it.
     * Delete Organization
     */
    async deleteOrganizationById(requestParameters: DeleteOrganizationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization> {
        const response = await this.deleteOrganizationByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Organization  Fetch the details of an organization by its id. The auth\'ed user must be an admin or owner of the organization to fetch it.
     * Get Organization
     */
    async getOrganizationByIdRaw(requestParameters: GetOrganizationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters['tROrganization'] == null) {
            throw new runtime.RequiredError(
                'tROrganization',
                'Required parameter "tROrganization" was null or undefined when calling getOrganizationById().'
            );
        }

        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling getOrganizationById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tROrganization'] != null) {
            headerParameters['TR-Organization'] = String(requestParameters['tROrganization']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/organization/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Get Organization  Fetch the details of an organization by its id. The auth\'ed user must be an admin or owner of the organization to fetch it.
     * Get Organization
     */
    async getOrganizationById(requestParameters: GetOrganizationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization> {
        const response = await this.getOrganizationByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth\'ed user must be an admin or owner of the organization to fetch it.
     * Get Organization Usage
     */
    async getOrganizationUsageRaw(requestParameters: GetOrganizationUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationUsageCount>> {
        if (requestParameters['tROrganization'] == null) {
            throw new runtime.RequiredError(
                'tROrganization',
                'Required parameter "tROrganization" was null or undefined when calling getOrganizationUsage().'
            );
        }

        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling getOrganizationUsage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tROrganization'] != null) {
            headerParameters['TR-Organization'] = String(requestParameters['tROrganization']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/organization/usage/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationUsageCountFromJSON(jsonValue));
    }

    /**
     * Get Organization Usage  Fetch the current usage specification of an organization by its id. The auth\'ed user must be an admin or owner of the organization to fetch it.
     * Get Organization Usage
     */
    async getOrganizationUsage(requestParameters: GetOrganizationUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationUsageCount> {
        const response = await this.getOrganizationUsageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Organization Users  Fetch the users of an organization by its id. The auth\'ed user must be an admin or owner of the organization to fetch it.
     * Get Organization Users
     */
    async getOrganizationUsersRaw(requestParameters: GetOrganizationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SlimUser>>> {
        if (requestParameters['tROrganization'] == null) {
            throw new runtime.RequiredError(
                'tROrganization',
                'Required parameter "tROrganization" was null or undefined when calling getOrganizationUsers().'
            );
        }

        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling getOrganizationUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tROrganization'] != null) {
            headerParameters['TR-Organization'] = String(requestParameters['tROrganization']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/organization/users/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SlimUserFromJSON));
    }

    /**
     * Get Organization Users  Fetch the users of an organization by its id. The auth\'ed user must be an admin or owner of the organization to fetch it.
     * Get Organization Users
     */
    async getOrganizationUsers(requestParameters: GetOrganizationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SlimUser>> {
        const response = await this.getOrganizationUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Organization  Update an organization. Only the owner of the organization can update it.
     * Update Organization
     */
    async updateOrganizationRaw(requestParameters: UpdateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters['tROrganization'] == null) {
            throw new runtime.RequiredError(
                'tROrganization',
                'Required parameter "tROrganization" was null or undefined when calling updateOrganization().'
            );
        }

        if (requestParameters['updateOrganizationData'] == null) {
            throw new runtime.RequiredError(
                'updateOrganizationData',
                'Required parameter "updateOrganizationData" was null or undefined when calling updateOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['tROrganization'] != null) {
            headerParameters['TR-Organization'] = String(requestParameters['tROrganization']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/organization`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationDataToJSON(requestParameters['updateOrganizationData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Update Organization  Update an organization. Only the owner of the organization can update it.
     * Update Organization
     */
    async updateOrganization(requestParameters: UpdateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization> {
        const response = await this.updateOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
