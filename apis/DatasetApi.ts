/* tslint:disable */
/* eslint-disable */
/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClientDatasetConfiguration,
  CreateDatasetRequest,
  Dataset,
  DatasetAndUsage,
  ErrorResponseBody,
  UpdateDatasetRequest,
} from '../models/index';
import {
    ClientDatasetConfigurationFromJSON,
    ClientDatasetConfigurationToJSON,
    CreateDatasetRequestFromJSON,
    CreateDatasetRequestToJSON,
    DatasetFromJSON,
    DatasetToJSON,
    DatasetAndUsageFromJSON,
    DatasetAndUsageToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    UpdateDatasetRequestFromJSON,
    UpdateDatasetRequestToJSON,
} from '../models/index';

export interface CreateDatasetOperationRequest {
    tROrganization: string;
    createDatasetRequest: CreateDatasetRequest;
}

export interface DeleteDatasetRequest {
    tRDataset: string;
    datasetId: string;
}

export interface GetClientDatasetConfigRequest {
    tRDataset: string;
}

export interface GetDatasetRequest {
    tROrganization: string;
    tRDataset: string;
    datasetId: string;
}

export interface GetDatasetsFromOrganizationRequest {
    tROrganization: string;
    organizationId: string;
}

export interface UpdateDatasetOperationRequest {
    tROrganization: string;
    updateDatasetRequest: UpdateDatasetRequest;
}

/**
 * 
 */
export class DatasetApi extends runtime.BaseAPI {

    /**
     * Create dataset  Create a new dataset. The auth\'ed user must be an owner of the organization to create a dataset.
     * Create dataset
     */
    async createDatasetRaw(requestParameters: CreateDatasetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dataset>> {
        if (requestParameters['tROrganization'] == null) {
            throw new runtime.RequiredError(
                'tROrganization',
                'Required parameter "tROrganization" was null or undefined when calling createDataset().'
            );
        }

        if (requestParameters['createDatasetRequest'] == null) {
            throw new runtime.RequiredError(
                'createDatasetRequest',
                'Required parameter "createDatasetRequest" was null or undefined when calling createDataset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['tROrganization'] != null) {
            headerParameters['TR-Organization'] = String(requestParameters['tROrganization']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/dataset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDatasetRequestToJSON(requestParameters['createDatasetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasetFromJSON(jsonValue));
    }

    /**
     * Create dataset  Create a new dataset. The auth\'ed user must be an owner of the organization to create a dataset.
     * Create dataset
     */
    async createDataset(requestParameters: CreateDatasetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dataset> {
        const response = await this.createDatasetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Dataset  Delete a dataset. The auth\'ed user must be an owner of the organization to delete a dataset.
     * Delete Dataset
     */
    async deleteDatasetRaw(requestParameters: DeleteDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tRDataset'] == null) {
            throw new runtime.RequiredError(
                'tRDataset',
                'Required parameter "tRDataset" was null or undefined when calling deleteDataset().'
            );
        }

        if (requestParameters['datasetId'] == null) {
            throw new runtime.RequiredError(
                'datasetId',
                'Required parameter "datasetId" was null or undefined when calling deleteDataset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tRDataset'] != null) {
            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/dataset/{dataset_id}`.replace(`{${"dataset_id"}}`, encodeURIComponent(String(requestParameters['datasetId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Dataset  Delete a dataset. The auth\'ed user must be an owner of the organization to delete a dataset.
     * Delete Dataset
     */
    async deleteDataset(requestParameters: DeleteDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDatasetRaw(requestParameters, initOverrides);
    }

    /**
     * Get Client Configuration  Get the client configuration for a dataset. Will use the TR-D
     * Get Client Configuration
     */
    async getClientDatasetConfigRaw(requestParameters: GetClientDatasetConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientDatasetConfiguration>> {
        if (requestParameters['tRDataset'] == null) {
            throw new runtime.RequiredError(
                'tRDataset',
                'Required parameter "tRDataset" was null or undefined when calling getClientDatasetConfig().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tRDataset'] != null) {
            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/dataset/envs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientDatasetConfigurationFromJSON(jsonValue));
    }

    /**
     * Get Client Configuration  Get the client configuration for a dataset. Will use the TR-D
     * Get Client Configuration
     */
    async getClientDatasetConfig(requestParameters: GetClientDatasetConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientDatasetConfiguration> {
        const response = await this.getClientDatasetConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Dataset  Get a dataset by id. The auth\'ed user must be an admin or owner of the organization to get a dataset.
     * Get Dataset
     */
    async getDatasetRaw(requestParameters: GetDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dataset>> {
        if (requestParameters['tROrganization'] == null) {
            throw new runtime.RequiredError(
                'tROrganization',
                'Required parameter "tROrganization" was null or undefined when calling getDataset().'
            );
        }

        if (requestParameters['tRDataset'] == null) {
            throw new runtime.RequiredError(
                'tRDataset',
                'Required parameter "tRDataset" was null or undefined when calling getDataset().'
            );
        }

        if (requestParameters['datasetId'] == null) {
            throw new runtime.RequiredError(
                'datasetId',
                'Required parameter "datasetId" was null or undefined when calling getDataset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tROrganization'] != null) {
            headerParameters['TR-Organization'] = String(requestParameters['tROrganization']);
        }

        if (requestParameters['tRDataset'] != null) {
            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/dataset/{dataset_id}`.replace(`{${"dataset_id"}}`, encodeURIComponent(String(requestParameters['datasetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasetFromJSON(jsonValue));
    }

    /**
     * Get Dataset  Get a dataset by id. The auth\'ed user must be an admin or owner of the organization to get a dataset.
     * Get Dataset
     */
    async getDataset(requestParameters: GetDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dataset> {
        const response = await this.getDatasetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Datasets from Organization  Get all datasets for an organization. The auth\'ed user must be an admin or owner of the organization to get its datasets.
     * Get Datasets from Organization
     */
    async getDatasetsFromOrganizationRaw(requestParameters: GetDatasetsFromOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DatasetAndUsage>>> {
        if (requestParameters['tROrganization'] == null) {
            throw new runtime.RequiredError(
                'tROrganization',
                'Required parameter "tROrganization" was null or undefined when calling getDatasetsFromOrganization().'
            );
        }

        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling getDatasetsFromOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tROrganization'] != null) {
            headerParameters['TR-Organization'] = String(requestParameters['tROrganization']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/dataset/organization/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DatasetAndUsageFromJSON));
    }

    /**
     * Get Datasets from Organization  Get all datasets for an organization. The auth\'ed user must be an admin or owner of the organization to get its datasets.
     * Get Datasets from Organization
     */
    async getDatasetsFromOrganization(requestParameters: GetDatasetsFromOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DatasetAndUsage>> {
        const response = await this.getDatasetsFromOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Dataset  Update a dataset. The auth\'ed user must be an owner of the organization to update a dataset.
     * Update Dataset
     */
    async updateDatasetRaw(requestParameters: UpdateDatasetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dataset>> {
        if (requestParameters['tROrganization'] == null) {
            throw new runtime.RequiredError(
                'tROrganization',
                'Required parameter "tROrganization" was null or undefined when calling updateDataset().'
            );
        }

        if (requestParameters['updateDatasetRequest'] == null) {
            throw new runtime.RequiredError(
                'updateDatasetRequest',
                'Required parameter "updateDatasetRequest" was null or undefined when calling updateDataset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['tROrganization'] != null) {
            headerParameters['TR-Organization'] = String(requestParameters['tROrganization']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/dataset`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDatasetRequestToJSON(requestParameters['updateDatasetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasetFromJSON(jsonValue));
    }

    /**
     * Update Dataset  Update a dataset. The auth\'ed user must be an owner of the organization to update a dataset.
     * Update Dataset
     */
    async updateDataset(requestParameters: UpdateDatasetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dataset> {
        const response = await this.updateDatasetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
