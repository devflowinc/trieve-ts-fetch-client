/* tslint:disable */
/* eslint-disable */
/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponseBody,
  StripePlan,
} from '../models/index';
import {
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    StripePlanFromJSON,
    StripePlanToJSON,
} from '../models/index';

export interface CancelSubscriptionRequest {
    tROrganization: string;
    subscriptionId: string;
}

export interface DirectToPaymentLinkRequest {
    planId: string;
    organizationId: string;
}

export interface UpdateSubscriptionPlanRequest {
    tROrganization: string;
    subscriptionId: string;
    planId: string;
}

/**
 * 
 */
export class StripeApi extends runtime.BaseAPI {

    /**
     * Cancel Subscription  Cancel a subscription by its id
     * Cancel Subscription
     */
    async cancelSubscriptionRaw(requestParameters: CancelSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tROrganization'] == null) {
            throw new runtime.RequiredError(
                'tROrganization',
                'Required parameter "tROrganization" was null or undefined when calling cancelSubscription().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling cancelSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tROrganization'] != null) {
            headerParameters['TR-Organization'] = String(requestParameters['tROrganization']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/stripe/subscription/{subscription_id}`.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel Subscription  Cancel a subscription by its id
     * Cancel Subscription
     */
    async cancelSubscription(requestParameters: CancelSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cancelSubscriptionRaw(requestParameters, initOverrides);
    }

    /**
     * Checkout  Get a direct link to the stripe checkout page for the plan and organization
     * Checkout
     */
    async directToPaymentLinkRaw(requestParameters: DirectToPaymentLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['planId'] == null) {
            throw new runtime.RequiredError(
                'planId',
                'Required parameter "planId" was null or undefined when calling directToPaymentLink().'
            );
        }

        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling directToPaymentLink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/stripe/payment_link/{plan_id}/{organization_id}`.replace(`{${"plan_id"}}`, encodeURIComponent(String(requestParameters['planId']))).replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Checkout  Get a direct link to the stripe checkout page for the plan and organization
     * Checkout
     */
    async directToPaymentLink(requestParameters: DirectToPaymentLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.directToPaymentLinkRaw(requestParameters, initOverrides);
    }

    /**
     * Get All Plans  Get a list of all plans
     * Get All Plans
     */
    async getAllPlansRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StripePlan>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/stripe/plans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StripePlanFromJSON));
    }

    /**
     * Get All Plans  Get a list of all plans
     * Get All Plans
     */
    async getAllPlans(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StripePlan>> {
        const response = await this.getAllPlansRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update Subscription Plan  Update a subscription to a new plan
     * Update Subscription Plan
     */
    async updateSubscriptionPlanRaw(requestParameters: UpdateSubscriptionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tROrganization'] == null) {
            throw new runtime.RequiredError(
                'tROrganization',
                'Required parameter "tROrganization" was null or undefined when calling updateSubscriptionPlan().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling updateSubscriptionPlan().'
            );
        }

        if (requestParameters['planId'] == null) {
            throw new runtime.RequiredError(
                'planId',
                'Required parameter "planId" was null or undefined when calling updateSubscriptionPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['tROrganization'] != null) {
            headerParameters['TR-Organization'] = String(requestParameters['tROrganization']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/stripe/subscription_plan/{subscription_id}/{plan_id}`.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId']))).replace(`{${"plan_id"}}`, encodeURIComponent(String(requestParameters['planId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Subscription Plan  Update a subscription to a new plan
     * Update Subscription Plan
     */
    async updateSubscriptionPlan(requestParameters: UpdateSubscriptionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateSubscriptionPlanRaw(requestParameters, initOverrides);
    }

}
