/* tslint:disable */
/* eslint-disable */
/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponseBody,
  EventReturn,
  GetEventsData,
} from '../models/index';
import {
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    EventReturnFromJSON,
    EventReturnToJSON,
    GetEventsDataFromJSON,
    GetEventsDataToJSON,
} from '../models/index';

export interface GetEventsRequest {
    tRDataset: string;
    getEventsData: GetEventsData;
}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI {

    /**
     * Get events for the dataset  Get events for the dataset specified by the TR-Dataset header.
     * Get events for the dataset
     */
    async getEventsRaw(requestParameters: GetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventReturn>> {
        if (requestParameters['tRDataset'] == null) {
            throw new runtime.RequiredError(
                'tRDataset',
                'Required parameter "tRDataset" was null or undefined when calling getEvents().'
            );
        }

        if (requestParameters['getEventsData'] == null) {
            throw new runtime.RequiredError(
                'getEventsData',
                'Required parameter "getEventsData" was null or undefined when calling getEvents().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['tRDataset'] != null) {
            headerParameters['TR-Dataset'] = String(requestParameters['tRDataset']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetEventsDataToJSON(requestParameters['getEventsData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventReturnFromJSON(jsonValue));
    }

    /**
     * Get events for the dataset  Get events for the dataset specified by the TR-Dataset header.
     * Get events for the dataset
     */
    async getEvents(requestParameters: GetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventReturn> {
        const response = await this.getEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
