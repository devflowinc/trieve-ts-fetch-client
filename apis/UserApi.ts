/* tslint:disable */
/* eslint-disable */
/**
 * Trieve API
 * Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.
 *
 * The version of the OpenAPI document: 0.6.9
 * Contact: developers@trieve.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiKeyDTO,
  ErrorResponseBody,
  SetUserApiKeyRequest,
  SetUserApiKeyResponse,
  SlimUser,
  UpdateUserData,
} from '../models/index';
import {
    ApiKeyDTOFromJSON,
    ApiKeyDTOToJSON,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    SetUserApiKeyRequestFromJSON,
    SetUserApiKeyRequestToJSON,
    SetUserApiKeyResponseFromJSON,
    SetUserApiKeyResponseToJSON,
    SlimUserFromJSON,
    SlimUserToJSON,
    UpdateUserDataFromJSON,
    UpdateUserDataToJSON,
} from '../models/index';

export interface DeleteUserApiKeyRequest {
    apiKeyId: string;
}

export interface SetUserApiKeyOperationRequest {
    setUserApiKeyRequest: SetUserApiKeyRequest;
}

export interface UpdateUserRequest {
    updateUserData: UpdateUserData;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Delete User Api Key  Delete an api key for the auth\'ed user.
     * Delete User Api Key
     */
    async deleteUserApiKeyRaw(requestParameters: DeleteUserApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiKeyDTO>>> {
        if (requestParameters['apiKeyId'] == null) {
            throw new runtime.RequiredError(
                'apiKeyId',
                'Required parameter "apiKeyId" was null or undefined when calling deleteUserApiKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/user/api_key/{api_key_id}`.replace(`{${"api_key_id"}}`, encodeURIComponent(String(requestParameters['apiKeyId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiKeyDTOFromJSON));
    }

    /**
     * Delete User Api Key  Delete an api key for the auth\'ed user.
     * Delete User Api Key
     */
    async deleteUserApiKey(requestParameters: DeleteUserApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiKeyDTO>> {
        const response = await this.deleteUserApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set User Api Key  Create a new api key for the auth\'ed user. Successful response will contain the newly created api key. If a write role is assigned the api key will have permission level of the auth\'ed user who calls this endpoint.
     * Set User Api Key
     */
    async setUserApiKeyRaw(requestParameters: SetUserApiKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetUserApiKeyResponse>> {
        if (requestParameters['setUserApiKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'setUserApiKeyRequest',
                'Required parameter "setUserApiKeyRequest" was null or undefined when calling setUserApiKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/user/api_key`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetUserApiKeyRequestToJSON(requestParameters['setUserApiKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetUserApiKeyResponseFromJSON(jsonValue));
    }

    /**
     * Set User Api Key  Create a new api key for the auth\'ed user. Successful response will contain the newly created api key. If a write role is assigned the api key will have permission level of the auth\'ed user who calls this endpoint.
     * Set User Api Key
     */
    async setUserApiKey(requestParameters: SetUserApiKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetUserApiKeyResponse> {
        const response = await this.setUserApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update User  Update a user\'s information. If the user_id is not provided, the auth\'ed user will be updated. If the user_id is provided, the auth\'ed user must be an admin (1) or owner (2) of the organization.
     * Update User
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SlimUser>> {
        if (requestParameters['updateUserData'] == null) {
            throw new runtime.RequiredError(
                'updateUserData',
                'Required parameter "updateUserData" was null or undefined when calling updateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/api/user`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserDataToJSON(requestParameters['updateUserData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SlimUserFromJSON(jsonValue));
    }

    /**
     * Update User  Update a user\'s information. If the user_id is not provided, the auth\'ed user will be updated. If the user_id is provided, the auth\'ed user must be an admin (1) or owner (2) of the organization.
     * Update User
     */
    async updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SlimUser> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
